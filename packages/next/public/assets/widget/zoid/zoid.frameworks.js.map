{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/child.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/parent.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/drivers/react.js","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://zoid/./src/drivers/vue.js","webpack://zoid/./src/drivers/angular.js","webpack://zoid/./src/drivers/angular2.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/templates/component.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushPromise","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","Error","dispatch","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","Zalgo","awaitActive","isRegex","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","PROTOCOL","host","getDomain","domain","mockDomain","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","anyMatch","collection1","collection2","item1","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","closeWindow","close","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","getFunctionName","fn","__name__","displayName","setFunctionName","base64encode","str","btoa","encodeURIComponent","replace","p1","String","fromCharCode","parseInt","Buffer","from","uniqueID","chars","charAt","floor","Date","toISOString","toLowerCase","objectIDs","serializeArgs","subkey","val","uid","getObjectID","memoize","options","cacheMap","memoizedFunction","cache","thisNamespace","cacheTime","now","reset","memoizePromise","memoizedPromiseFunction","inlineMemoize","logic","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","safeInterval","loop","defineLazyProp","configurable","arrayFrom","isObjectObject","isPlainObject","prototype","replaceObject","replacer","fullKey","itemKey","isDefined","cleanup","tasks","cleaned","register","task","shift","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","formatQuery","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","PopupOpenError","awaitFrameLoadPromises","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","tag","createElement","class","className","setAttribute","attributes","styleSheet","el","styleText","cssText","createTextNode","setStyle","html","innerHTML","allowTransparency","backgroundColor","border","isIE","navigator","userAgent","hasAttribute","getElement","event","removeEventListener","showElement","setProperty","hideElement","destroyElement","removeChild","isElementClosed","onResize","width","height","currentWidth","offsetWidth","currentHeight","offsetHeight","newWidth","newHeight","observer","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","disconnect","isShadowElement","toPx","toNum","toCSS","test","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","resolveHelloPromise","helloPromises","existingPromise","newPromise","sayHello","send","instanceID","data","getWindowInstanceID","markWindowKnown","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","winPromise","windowNamePromise","getType","getName","focus","isClosed","setLocation","href","setName","sameDomain","frameElement","querySelectorAll","getFrameForWindow","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","getID","setWindow","isPopup","isPopupPromise","getNamePromise","reopenPromise","open","focusPromise","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","on","meth","methodSource","arg","stringifyArguments","__id__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","fireAndForget","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","serializedMessage","dom","forEach","postMessage","mockUserAgent","getUserAgent","foreignGlobal","receiveMessage","sendMessage","strategies","errors","strategyName","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","RECEIVE_MESSAGE_TYPES","logName","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","strDomain","regexListeners","regexListener","errorHandler","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","getHelloPromise","awaitWindowHello","targetDomain","actualDomain","normalizedDomain","normalizeDomain","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","internalSerializeMessage","internalDeserializeMessage","getProxyObject","PROP_TYPE","STRING","OBJECT","FUNCTION","BOOLEAN","NUMBER","ARRAY","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","EVENT","RENDER","RENDERED","DISPLAY","ERROR","CLOSE","DESTROY","PROPS","RESIZE","FOCUS","normalizeChildProp","propsDef","helpers","prop","childDecorate","onProps","resize","getParentDomain","show","hide","parseChildWindowName","windowName","zoidcomp","encodedPayload","atob","charCodeAt","base64decode","getChildPayload","destroy","getQueryParam","queryParam","getQueryValue","queryValue","parentComponent","overrides","parentWin","containerTemplate","prerenderTemplate","dimensions","autoResize","domainMatch","initPromise","handledErrors","clean","state","triggered","eventName","handlerList","trigger","triggerOnce","currentProxyWin","currentProxyContainer","childComponent","visible","onErrorOverride","getProxyContainerOverride","getProxyContainer","showOverride","hideOverride","closeOverride","renderContainerOverride","renderContainer","getProxyWindowOverride","getProxyWindow","setProxyWinOverride","setProxyWin","openFrameOverride","openFrame","openPrerenderFrameOverride","openPrerenderFrame","prerenderOverride","prerender","openOverride","openPrerenderOverride","openPrerender","watchForUnloadOverride","watchForUnload","getPropsForChild","sendToChild","windowProp","proxyWin","containerElement","shadowHost","shadowRoot","getShadowRoot","getShadowHost","slotName","slot","slotProvider","insertShadowSlot","getPropsRef","childDomain","propRef","getUrl","getChildDomain","getDomainMatcher","title","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","getWindowRef","windows","initChild","childExports","proxyFrame","frameWatcher","watchElementForClose","cleanUpWindow","unloadWindowListener","closeParentWindowListener","checkWindowClose","secondIsClosed","renderTemplate","renderer","proxyPrerenderWin","prerenderWindow","isBlankDomain","tagName","children","writeElementToWindow","proxyContainer","innerContainer","getHelpers","updateProps","setProps","newProps","isUpdate","inputProps","propNames","aliases","propDef","alias","default","decorate","required","extendProps","init","onRender","onDisplay","onRendered","onClose","onDestroy","onFocus","setupEvents","render","ZOID","checkAllowRender","delegatePromise","delegateProps","propName","allowDelegate","childOverridesPromise","POST_MESSAGE","getDelegateOverrides","childOverrides","delegate","watchForUnloadPromise","buildUrlPromise","serialization","dotify","prefix","newobj","every","dotkey","propsToQuery","query","originalUrl","originalHash","hashString","extendUrl","normalizeMockUrl","onRenderPromise","getProxyContainerPromise","getProxyWindowPromise","buildWindowNamePromise","childPayload","version","__ZOID__","parentDomain","checkClose","buildWindowName","openFramePromise","openPrerenderFramePromise","renderContainerPromise","openPromise","openPrerenderPromise","setStatePromise","prerenderPromise","setWindowNamePromise","loadUrlPromise","builtUrl","watchForClosePromise","watchForClose","onDisplayPromise","openBridgePromise","runTimeoutPromise","onRenderedPromise","react","React","ReactDOM","subClass","superClass","__proto__","componentDidMount","findDOMNode","setState","componentDidUpdate","Component","vue","Vue","component","inheritAttrs","mounted","$el","$attrs","watch","deep","angular","ng","directive","g","toUpperCase","scope","restrict","controller","$scope","$element","safeApply","$root","$$phase","$apply","getProps","instance","$watch","angular2","NgModule","ElementRef","NgZone","internalProps","zone","run","ComponentInstance","AngularComponent","selector","template","inputs","Class","elementRef","_props","ngOnInit","targetElement","nativeElement","ngDoCheck","obj1","obj2","checked","equals","declarations","defaultContainerTemplate","div","cspNonce","classList","add","remove","defaultPrerenderTemplate","spinner","defaultNoop","decorateOnce","bridgeUrl","allowedParentDomains","defaultContext","validate","logger","info","normalizeOptions","driverCache","isChild","payload","registerChild","xprops","components","onPropHandlers","propsRef","parentComponentWindow","ref","getNthParent","getNthParentFromTop","ancestor","getParentComponentWindow","normalizedProps","normalizeChildProps","checkParentDomain","getAutoResize","getPropsByRef","getDefaultContext","finalContext","getDefaultContainer","renderTo","listenForDelegate","driver","driverName","dep","drivers","canRenderTo","initialized","sourceElement","originalEvent","messageListener","listenForMessages","initHello","setupPostRobot","comp","destroyAll","destroyPromise","destroyComponents","responseListeners","cancelResponseListeners","destroyPostRobot"],"mappings":"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","file":"zoid.frameworks.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    let result = [ ...getAllChildFrames(top), top ];\n\n    // Win may be in shadow dom\n    if (result.indexOf(win) === -1) {\n        result = [ ...result, win, ...getAllChildFrames(win) ];\n    }\n\n    return result;\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        let parent = frame;\n\n        while (parent.parentNode && parent.parentNode !== parent) {\n            parent = parent.parentNode;\n        }\n\n        // $FlowFixMe\n        if (!parent.host || !doc.documentElement.contains(parent.host)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getFrameForWindow(win : CrossDomainWindowType) : ?HTMLElement {\n    if (isSameDomain(win)) {\n        return assertSameDomain(win).frameElement;\n    }\n\n    for (const frame of document.querySelectorAll('iframe')) {\n        if (frame && frame.contentWindow && frame.contentWindow === win) {\n            return frame;\n        }\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : ?WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    return setFunctionName(memoizedFunction, `${ getFunctionName(method) }::memoized`);\n}\n\nexport function promiseIdentity<T : mixed>(item : ZalgoPromise<T> | T) : ZalgoPromise<T> {\n    // $FlowFixMe\n    return ZalgoPromise.resolve(item);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    reset : () => void\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        },\n\n        reset() {\n            handlers = {};\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.shift();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER || event.keyCode === KEY_CODES.SPACE) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    if (width && height) {\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n\n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n\n    if (!enablePerformance()) {\n        return;\n    }\n\n    if (!window.performance || typeof window.performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = window.performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n\nexport function isShadowElement(element : Node) : boolean {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    return element.toString() === '[object ShadowRoot]';\n}\n\nexport function getShadowRoot(element : Node) : ?Node {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    if (isShadowElement(element)) {\n        return element;\n    }\n}\n\nexport function getShadowHost(element : Node) : ?HTMLElement {\n    const shadowRoot = getShadowRoot(element);\n\n    // $FlowFixMe\n    if (shadowRoot.host) {\n        // $FlowFixMe\n        return shadowRoot.host;\n    }\n}\n\nexport function insertShadowSlot(element : HTMLElement) : HTMLElement {\n    const shadowHost = getShadowHost(element);\n\n    if (!shadowHost) {\n        throw new Error(`Element is not in shadow dom`);\n    }\n\n    if (isShadowElement(shadowHost)) {\n        throw new Error(`Host element is also in shadow dom`);\n    }\n\n    const slotName = `shadow-slot-${ uniqueID() }`;\n\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n    element.appendChild(slot);\n    \n    const slotProvider = document.createElement('div');\n    slotProvider.setAttribute('slot', slotName);\n    shadowHost.appendChild(slotProvider);\n\n    return slotProvider;\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction resolveHelloPromise(win : CrossDomainWindowType, { domain }) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    const existingPromise = helloPromises.get(win);\n    if (existingPromise) {\n        existingPromise.resolve({ domain });\n    }\n    const newPromise = ZalgoPromise.resolve({ domain });\n    helloPromises.set(win, newPromise);\n    return newPromise;\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        resolveHelloPromise(source, { domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            resolveHelloPromise(win, { domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain, getFrameForWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send, id = uniqueID() } : { send : SendType, id? : string }) : SerializedWindowType {\n    \n    let windowNamePromise = winPromise.then(win => {\n        if (isSameDomain(win)) {\n            return assertSameDomain(win).name;\n        }\n    });\n    \n    return {\n        id,\n        getType: () => winPromise.then(win => {\n            return getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        }),\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName:       () => winPromise.then(win => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            if (isSameDomain(win)) {\n                return assertSameDomain(win).name;\n            }\n\n            return windowNamePromise;\n        }),\n        focus:   () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => winPromise.then(win => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomain = isSameDomain(win);\n            const frame = getFrameForWindow(win);\n\n            if (!sameDomain) {\n                throw new Error(`Can not set name for cross-domain window: ${ name }`);\n            }\n\n            assertSameDomain(win).name = name;\n            if (frame) {\n                frame.setAttribute('name', name);\n            }\n\n            windowNamePromise = ZalgoPromise.resolve(name);\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : { win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType }) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win, { send });\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : ZalgoPromise<boolean> {\n        return this.getType().then(type => {\n            return type === WINDOW_TYPE.POPUP;\n        });\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        const isPopupPromise = this.isPopup();\n        const getNamePromise = this.getName();\n\n        const reopenPromise = ZalgoPromise.hash({ isPopup: isPopupPromise, name: getNamePromise }).then(({ isPopup, name }) => {\n            if (isPopup && name) {\n                window.open('', name);\n            }\n        });\n        const focusPromise = this.serializedWindow.focus();\n\n        return ZalgoPromise.all([\n            reopenPromise,\n            focusPromise\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType, { send } : { send : SendType }) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        this.serializedWindow = getSerializedWindow(this.actualWindowPromise, { send, id: this.getID() });\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win, { send });\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex, arrayFrom } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction stringifyArguments(args : $ReadOnlyArray<mixed> = []) : string {\n    return arrayFrom(args).map(arg => {\n        if (typeof arg === 'string') {\n            return `'${ arg }'`;\n        }\n        if (arg === undefined) {\n            return 'undefined';\n        }\n        if (arg === null) {\n            return 'null';\n        }\n        if (typeof arg === 'boolean') {\n            return arg.toString();\n        }\n        if (Array.isArray(arg)) {\n            return '[ ... ]';\n        }\n        if (typeof arg === 'object') {\n            return '{ ... }';\n        }\n        if (typeof arg === 'function') {\n            return '() => { ... }';\n        }\n        return `<${ typeof arg }>`;\n    }).join(', ');\n}\n\nfunction listenForFunctionCalls({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }(${ stringifyArguments(data.args) }) failed\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    let name = val.__name__ || val.name || key;\n\n    if (typeof name === 'string' && typeof name.indexOf === 'function' && name.indexOf('anonymous::') === 0) {\n        name = name.replace('anonymous::', `${ key }::`);\n    }\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `Remote call to ${ name }(${ stringifyArguments(arguments) }) failed\\n\\n${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                const windowDomain = getDomain(win);\n                \n                if (windowDomain !== dom) {\n                    throw new Error(`Mock domain target ${ dom } does not match window domain ${ windowDomain }`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            throw new Error(`Bridge not needed for browser`);\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            throw new Error(`Global messaging not needed for browser`);\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map((err, i) => `${ i }. ${ stringifyError(err) }`).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                delete nameListeners[name];\n            }\n\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, stringifyError } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            try {\n                // $FlowFixMe\n                sendMessage(source, origin, {\n                    type,\n                    ack,\n                    hash:   message.hash,\n                    name:   message.name,\n                    ...response\n                }, { on, send });\n            } catch (err) {\n                throw new Error(`Send response message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            }\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        try {\n            if (!matchDomain(options.domain, origin)) {\n                throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n            }\n    \n            if (source !== options.win) {\n                throw new Error(`Ack source does not match registered window`);\n            }\n        } catch (err) {\n            options.promise.reject(err);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    try {\n        if (!window || window.closed || !event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify, stringifyError } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, targetDomain : DomainMatcher, actualDomain : ?string, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    if (typeof targetDomain === 'string') {\n        return ZalgoPromise.resolve(targetDomain);\n    }\n    \n    return ZalgoPromise.try(() => {\n        return actualDomain || sayHello(win, { send }).then(({ domain }) => domain);\n\n    }).then(normalizedDomain => {\n        if (!matchDomain(targetDomain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(targetDomain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        }\n        \n    }).then(({ domain: actualDomain } = {}) => {\n\n        return normalizeDomain(win, domain, actualDomain, { send });\n    }).then(targetDomain => {\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        try {\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n        } catch (err) {\n            throw new Error(`Send request message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n        }\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function getGlobal(win? : CrossDomainWindowType = window) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n\nexport function destroyGlobal() {\n    delete window[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nexport type ProxyObject<T> = {|\n    get : () => ZalgoPromise<T>\n|};\n\nexport function getProxyObject<T>(obj : T) : ProxyObject<T> {\n    return {\n        get() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call get on proxy object from a remote window`);\n                }\n    \n                return obj;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: ('opener' : 'opener'),\n    PARENT: ('parent' : 'parent'),\n    GLOBAL: ('global' : 'global')\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    DESTROY:  'zoid-destroy',\n    PROPS:    'zoid-props',\n    RESIZE:   'zoid-resize',\n    FOCUS:    'zoid-focus'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { PropsDefinitionType, PropsType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\n// $FlowFixMe\nexport function normalizeChildProp<P, T>(propsDef : PropsDefinitionType<P>, props : PropsType<P>, key : string, value : ?T, helpers : ChildHelpers<P>) : ?T  {\n    if (!propsDef.hasOwnProperty(key)) {\n        return value;\n    }\n\n    const prop = propsDef[key];\n\n    if (typeof prop.childDecorate === 'function') {\n        const { close, focus, onError, onProps, resize, getParent, getParentDomain, show, hide } = helpers;\n        const decoratedValue = prop.childDecorate({ value, close, focus, onError, onProps, resize, getParent, getParentDomain, show, hide });\n\n        // $FlowFixMe\n        return decoratedValue;\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, propsDef : PropsDefinitionType<P>, props : PropsType<P>, origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    for (const key of Object.keys(props)) {\n        const prop = propsDef[key];\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        // $FlowFixMe\n        const value = normalizeChildProp(propsDef, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of Object.keys(propsDef)) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(propsDef, props, key, undefined, helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage, type CrossDomainFunctionType } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { getGlobal } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { NormalizedComponentOptionsType } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef } from '../parent';\nimport type { StringMatcherType } from '../types';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : CrossDomainFunctionType<[ PropsType<P> ], void>,\n    close : CrossDomainFunctionType<[], void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType,\n    getParentDomain : () => string,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nfunction getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n    const { type } = ref;\n\n    if (type === WINDOW_REFERENCES.OPENER) {\n        return assertExists('opener', getOpener(window));\n\n    } else if (type === WINDOW_REFERENCES.PARENT && typeof ref.distance === 'number') {\n        return assertExists('parent', getNthParentFromTop(window, ref.distance));\n\n    } else if (type === WINDOW_REFERENCES.GLOBAL && ref.uid && typeof ref.uid === 'string') {\n        const { uid } = ref;\n        const ancestor = getAncestor(window);\n\n        if (!ancestor) {\n            throw new Error(`Can not find ancestor window`);\n        }\n\n        for (const frame of getAllFramesInWindow(ancestor)) {\n            if (isSameDomain(frame)) {\n                const global = getGlobal(frame);\n\n                if (global && global.windows && global.windows[uid]) {\n                    return global.windows[uid];\n                }\n            }\n        }\n    }\n\n    throw new Error(`Unable to find ${ type } parent component window`);\n}\n\nfunction checkParentDomain(allowedParentDomains : StringMatcherType, domain : string) {\n    if (!matchDomain(allowedParentDomains, domain)) {\n        throw new Error(`Can not be rendered by domain: ${ domain }`);\n    }\n}\n\nfunction focus() : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        window.focus();\n    });\n}\n\nfunction destroy() : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        window.close();\n    });\n}\n\nfunction getPropsByRef<P>(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n    let props;\n\n    if (type === INITIAL_PROPS.RAW) {\n        props = value;\n    } else if (type === INITIAL_PROPS.UID) {\n        if (!isSameDomain(parentComponentWindow)) {\n            throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n        }\n\n        const global = getGlobal(parentComponentWindow);\n        props = assertExists('props', global && global.props[uid]);\n    }\n\n    if (!props) {\n        throw new Error(`Could not find props`);\n    }\n\n    return deserializeMessage(parentComponentWindow, domain, props);\n}\n\nexport type ChildComponent<P> = {|\n    getProps : () => PropsType<P>,\n    init : () => ZalgoPromise<void>\n|};\n\nexport function childComponent<P>(options : NormalizedComponentOptionsType<P>) : ChildComponent<P> {\n    const { propsDef, autoResize, allowedParentDomains } = options;\n\n    const onPropHandlers = [];\n    const childPayload = getChildPayload();\n    let props : PropsType<P>;\n\n    if (!childPayload) {\n        throw new Error(`No child payload found`);\n    }\n\n    if (childPayload.version !== __ZOID__.__VERSION__) {\n        throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n    }\n\n    const { parent: parentRef, parentDomain, exports, context, props: propsRef } = childPayload;\n    const parentComponentWindow = getParentComponentWindow(parentRef);\n    const parent = deserializeMessage(parentComponentWindow, parentDomain, exports);\n\n    const { show, hide, close } = parent;\n\n    const getParent = () => parentComponentWindow;\n    const getParentDomain = () => parentDomain;\n    \n    const onProps = (handler : Function) => {\n        onPropHandlers.push(handler);\n    };\n\n    const onError = (err : mixed) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            if (parent && parent.onError) {\n                return parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    };\n\n    const resize = ({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> => {\n        return parent.resize.fireAndForget({ width, height });\n    };\n\n    const getHelpers = () : ChildHelpers<P> => {\n        return {\n            show, hide, close, focus, onError, resize,\n            onProps, getParent, getParentDomain\n        };\n    };\n\n    const watchForClose = () => {\n        window.addEventListener('beforeunload', () => {\n            parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(parentComponentWindow, () => {\n            destroy();\n        });\n    };\n\n    const setProps = (newProps : PropsType<P>, origin : string, isUpdate : boolean = false) => {\n        const helpers = getHelpers();\n        const normalizedProps = normalizeChildProps(parentComponentWindow, propsDef, newProps, origin, helpers, isUpdate);\n\n        if (props) {\n            extend(props, normalizedProps);\n        } else {\n            props = normalizedProps;\n        }\n\n        for (const handler of onPropHandlers) {\n            handler(props);\n        }\n    };\n    \n    const getAutoResize = () : { width : boolean, height : boolean, element : ?HTMLElement } => {\n        let { width = false, height = false, element = 'body' } = autoResize;\n        element = getElementSafe(element);\n        return { width, height, element };\n    };\n\n    const watchForResize = () : ?ZalgoPromise<void> => {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = getAutoResize();\n\n            if (!element || (!width && !height) || context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    };\n\n    const updateProps = (newProps : (PropsType<P>)) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => setProps(newProps, parentDomain, true));\n    };\n\n    const init = () => {\n        return ZalgoPromise.try(() => {\n            checkParentDomain(allowedParentDomains, parentDomain);\n            markWindowKnown(parentComponentWindow);\n            watchForClose();\n\n            return parent.init({ updateProps, close: destroy });\n    \n        }).then(() => {\n            return watchForResize();\n    \n        }).catch(err => {\n            onError(err);\n        });\n    };\n\n    const getProps = () => {\n        if (props) {\n            return props;\n        }\n\n        setProps(getPropsByRef(parentComponentWindow, parentDomain, propsRef), parentDomain);\n        return props;\n    };\n\n    return {\n        init,\n        getProps\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined, extend } from 'belter/src';\n\nimport type { PropsInputType, PropsType, PropsDefinitionType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function extendProps<P>(propsDef : PropsDefinitionType<P>, props : PropsType<P>, inputProps : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    inputProps = inputProps || {};\n    extend(props, inputProps);\n\n    const propNames = isUpdate ? [] : [ ...Object.keys(propsDef) ];\n\n    for (const key of Object.keys(inputProps)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, event, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = propsDef[key];\n\n        // $FlowFixMe\n        let value = inputProps[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(inputProps[alias])) {\n                value = inputProps[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props, state, close, focus, event, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props, state, close, focus, event, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        props[key] = value;\n    }\n\n    for (const alias of aliases) {\n        delete props[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const propDef = propsDef[key];\n        const value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (__DEBUG__ && isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            props[key] = propDef.decorate({ value, props, state, close, focus, event, onError });\n        }\n    }\n\n    for (const key of Object.keys(propsDef)) {\n        const propDef = propsDef[key];\n        // $FlowFixMe\n        const propVal = props[key];\n        if (propDef.required !== false && !isDefined(propVal)) {\n            throw new Error(`Expected prop \"${ key }\" to be defined`);\n        }\n    }\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : PropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    // $FlowFixMe\n    const keys = Object.keys(props);\n    \n    return ZalgoPromise.all(keys.map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                getQueryParam(prop, key, value),\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow, type CrossDomainFunctionType, cleanUpWindow } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain, closeWindow, onCloseWindow, isWindowClosed, isSameTopWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extendUrl, appendChild, cleanup, base64encode, isRegex,\n    once, stringifyError, destroyElement, getElementSafe, showElement, hideElement, iframe,\n    awaitFrameWindow, popup, normalizeDimension, watchElementForClose, isShadowElement, insertShadowSlot } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport { getGlobal, getProxyObject, type ProxyObject } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\nimport type { NormalizedComponentOptionsType } from '../component';\n\nimport { propsToQuery, extendProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : CrossDomainFunctionType<[], boolean>,\n    resize : CrossDomainFunctionType<[{ width? : ?number, height? : ?number }], void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    parentDomain : string,\n    childDomain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nfunction getDefaultProps<P>() : PropsType<P> {\n    // $FlowFixMe\n    return {};\n}\n\ntype GetProxyContainer = (container : string | HTMLElement) => ZalgoPromise<ProxyObject<HTMLElement>>;\ntype Show = () => ZalgoPromise<void>;\ntype Hide = () => ZalgoPromise<void>;\ntype Close = () => ZalgoPromise<void>;\ntype OnError = (mixed) => ZalgoPromise<void>;\ntype RenderContainer = (proxyContainer : ProxyObject<HTMLElement>, { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> }) => ZalgoPromise<?ProxyObject<HTMLElement>>;\ntype SetProxyWin = (ProxyWindow) => ZalgoPromise<void>;\ntype GetProxyWindow = () => ZalgoPromise<ProxyWindow>;\ntype OpenFrame = (context : $Values<typeof CONTEXT>, { windowName : string }) => ZalgoPromise<?ProxyObject<HTMLIFrameElement>>;\ntype OpenPrerenderFrame = (context : $Values<typeof CONTEXT>) => ZalgoPromise<?ProxyObject<HTMLIFrameElement>>;\ntype Prerender = (proxyPrerenderWin : ProxyWindow, { context : $Values<typeof CONTEXT>, uid : string }) => ZalgoPromise<void>;\ntype Open = (context : $Values<typeof CONTEXT>, { proxyWin : ProxyWindow, proxyFrame : ?ProxyObject<HTMLIFrameElement>, windowName : string }) => ZalgoPromise<ProxyWindow>;\ntype OpenPrerender = (context : $Values<typeof CONTEXT>, proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>;\ntype WatchForUnload = () => ZalgoPromise<void>;\n\ntype ParentDelegateOverrides<P> = {|\n    props : PropsType<P>,\n    event : EventEmitterType,\n    close : Close,\n    onError : OnError,\n    getProxyContainer : GetProxyContainer,\n    show : Show,\n    hide : Hide,\n    renderContainer : RenderContainer,\n    getProxyWindow : GetProxyWindow,\n    setProxyWin : SetProxyWin,\n    openFrame : OpenFrame,\n    openPrerenderFrame : OpenPrerenderFrame,\n    prerender : Prerender,\n    open : Open,\n    openPrerender : OpenPrerender,\n    watchForUnload : WatchForUnload\n|};\n\ntype DelegateOverrides = {|\n    getProxyContainer : GetProxyContainer,\n    show : Show,\n    hide : Hide,\n    renderContainer : RenderContainer,\n    getProxyWindow : GetProxyWindow,\n    setProxyWin : SetProxyWin,\n    openFrame : OpenFrame,\n    openPrerenderFrame : OpenPrerenderFrame,\n    prerender : Prerender,\n    open : Open,\n    openPrerender : OpenPrerender,\n    watchForUnload : WatchForUnload\n|};\n\ntype ParentComponent<P> = {|\n    init : () => void,\n    render : (CrossDomainWindowType, string | HTMLElement, $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    setProps : (newProps : PropsInputType<P>, isUpdate? : boolean) => void,\n    destroy : (err? : mixed) => ZalgoPromise<void>,\n    getHelpers : () => ParentHelpers<P>,\n    getDelegateOverrides : () => ZalgoPromise<DelegateOverrides>\n|};\n\nconst getDefaultOverrides = <P>() : ParentDelegateOverrides<P> => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function parentComponent<P>(options : NormalizedComponentOptionsType<P>, overrides? : ParentDelegateOverrides<P> = getDefaultOverrides(), parentWin : CrossDomainWindowType = window) : ParentComponent<P> {\n    const { propsDef, containerTemplate, prerenderTemplate, tag, name, attributes, dimensions, autoResize, url, domain: domainMatch, validate } = options;\n\n    const initPromise = new ZalgoPromise();\n    const handledErrors = [];\n    const clean = cleanup();\n    const state = {};\n    const event = overrides.event ? overrides.event : eventEmitter();\n    const props = overrides.props ? overrides.props : getDefaultProps();\n\n    let currentProxyWin : ?ProxyWindow;\n    let currentProxyContainer : ?ProxyObject<HTMLElement>;\n    let childComponent : ?ChildExportsType<P>;\n\n    let visible : boolean = true;\n\n    const onErrorOverride : ?OnError = overrides.onError;\n    let getProxyContainerOverride : ?GetProxyContainer = overrides.getProxyContainer;\n    let showOverride : ?Show = overrides.show;\n    let hideOverride : ?Hide = overrides.hide;\n    const closeOverride : ?Close = overrides.close;\n    let renderContainerOverride : ?RenderContainer = overrides.renderContainer;\n    let getProxyWindowOverride : ?GetProxyWindow = overrides.getProxyWindow;\n    let setProxyWinOverride : ?SetProxyWin = overrides.setProxyWin;\n    let openFrameOverride : ?OpenFrame = overrides.openFrame;\n    let openPrerenderFrameOverride : ?OpenPrerenderFrame = overrides.openPrerenderFrame;\n    let prerenderOverride : ?Prerender = overrides.prerender;\n    let openOverride : ?Open = overrides.open;\n    let openPrerenderOverride : ?OpenPrerender = overrides.openPrerender;\n    let watchForUnloadOverride : ?WatchForUnload = overrides.watchForUnload;\n\n    const getPropsForChild = (domain : string | RegExp) : PropsType<P> => {\n        const result = {};\n\n        for (const key of Object.keys(props)) {\n            const prop = propsDef[key];\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n            \n            result[key] = props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    };\n\n    const setupEvents = () => {\n        event.on(EVENT.RENDER,   () => props.onRender());\n        event.on(EVENT.DISPLAY,  () => props.onDisplay());\n        event.on(EVENT.RENDERED, () => props.onRendered());\n        event.on(EVENT.CLOSE,    () => props.onClose());\n        event.on(EVENT.DESTROY,  () => props.onDestroy());\n        event.on(EVENT.RESIZE,   () => props.onResize());\n        event.on(EVENT.FOCUS,    () => props.onFocus());\n        event.on(EVENT.PROPS,    (newProps) => props.onProps(newProps));\n        event.on(EVENT.ERROR, err => {\n            if (props && props.onError) {\n                return props.onError(err);\n            } else {\n                return initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n\n        clean.register(event.reset);\n    };\n\n    const getProxyWindow = () : ZalgoPromise<ProxyWindow> => {\n        if (getProxyWindowOverride) {\n            return getProxyWindowOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            const windowProp = props.window;\n\n            if (windowProp) {\n                const proxyWin = toProxyWindow(windowProp);\n                clean.register(() => windowProp.close());\n                return proxyWin;\n            }\n\n            return new ProxyWindow({ send });\n        });\n    };\n\n    const getProxyContainer : GetProxyContainer = (container : string | HTMLElement) : ZalgoPromise<ProxyObject<HTMLElement>> => {\n        if (getProxyContainerOverride) {\n            return getProxyContainerOverride(container);\n        }\n\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            if (isShadowElement(containerElement)) {\n                containerElement = insertShadowSlot(containerElement);\n            }\n\n            return getProxyObject(containerElement);\n        });\n    };\n\n    const getPropsRef = (proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, uid : string) : PropRef => {\n        const value = serializeMessage(proxyWin, domain, getPropsForChild(domain));\n\n        const propRef = (childDomain === getDomain())\n            ? { type: INITIAL_PROPS.UID, uid }\n            : { type: INITIAL_PROPS.RAW, value };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = getGlobal(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    };\n\n    const setProxyWin = (proxyWin : ProxyWindow) : ZalgoPromise<void> => {\n        if (setProxyWinOverride) {\n            return setProxyWinOverride(proxyWin);\n        }\n\n        return ZalgoPromise.try(() => {\n            currentProxyWin = proxyWin;\n        });\n    };\n\n    const show = () : ZalgoPromise<void> => {\n        if (showOverride) {\n            return showOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            visible = true;\n            if (currentProxyContainer) {\n                return currentProxyContainer.get().then(showElement);\n            }\n        });\n    };\n\n    const hide = () : ZalgoPromise<void> => {\n        if (hideOverride) {\n            return hideOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            visible = false;\n            if (currentProxyContainer) {\n                return currentProxyContainer.get().then(hideElement);\n            }\n        });\n    };\n\n    const getUrl = () : string => {\n        if (typeof url === 'function') {\n            return url({ props });\n        }\n\n        return url;\n    };\n\n    const buildUrl = () : ZalgoPromise<string> => {\n        return propsToQuery(propsDef, props).then(query => {\n            return extendUrl(normalizeMockUrl(getUrl()), { query });\n        });\n    };\n\n    const getChildDomain = () : string => {\n        if (domainMatch && typeof domainMatch === 'string') {\n            return domainMatch;\n        }\n\n        return getDomainFromUrl(getUrl());\n    };\n\n    const getDomainMatcher = () : string | RegExp => {\n        if (domainMatch && isRegex(domainMatch)) {\n            return domainMatch;\n        }\n\n        return getChildDomain();\n    };\n\n    const openFrame = (context : $Values<typeof CONTEXT>, { windowName } : { windowName : string }) : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> => {\n        if (openFrameOverride) {\n            return openFrameOverride(context, { windowName });\n        }\n        \n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                return getProxyObject(iframe({\n                    attributes: {\n                        name:  windowName,\n                        title: name,\n                        ...attributes.iframe\n                    }\n                }));\n            }\n        });\n    };\n\n    const openPrerenderFrame = (context : $Values<typeof CONTEXT>) : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> => {\n        if (openPrerenderFrameOverride) {\n            return openPrerenderFrameOverride(context);\n        }\n\n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                return getProxyObject(iframe({\n                    attributes: {\n                        name:  `__zoid_prerender_frame__${ name }_${ uniqueID() }__`,\n                        title: `prerender__${ name }`,\n                        ...attributes.iframe\n                    }\n                }));\n            }\n        });\n    };\n    \n    const openPrerender = (context : $Values<typeof CONTEXT>, proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> => {\n        if (openPrerenderOverride) {\n            return openPrerenderOverride(context, proxyWin, proxyPrerenderFrame);\n        }\n        \n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                if (!proxyPrerenderFrame) {\n                    throw new Error(`Expected proxy frame to be passed`);\n                }\n                \n                return proxyPrerenderFrame.get().then(prerenderFrame => {\n                    clean.register(() => destroyElement(prerenderFrame));\n        \n                    return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                        return assertSameDomain(prerenderFrameWindow);\n                    }).then(win => {\n                        return toProxyWindow(win);\n                    });\n                });\n            } else if (context === CONTEXT.POPUP && __ZOID__.__POPUP_SUPPORT__) {\n                return proxyWin;\n            } else {\n                throw new Error(`No render target found`);\n            }\n        });\n    };\n\n    const focus = () : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            if (currentProxyWin) {\n                return ZalgoPromise.all([\n                    event.trigger(EVENT.FOCUS),\n                    currentProxyWin.focus()\n                ]).then(noop);\n            }\n        });\n    };\n\n    const getWindowRef = (target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef => {\n        \n        if (domain === getDomain(window)) {\n            const global = getGlobal(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    };\n\n    const runTimeout = () : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            const timeout = props.timeout;\n\n            if (timeout) {\n                return initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    };\n\n    const initChild = (childExports : ChildExportsType<P>) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            childComponent = childExports;\n            initPromise.resolve();\n            clean.register(() => childExports.close.fireAndForget().catch(noop));\n        });\n    };\n\n    const resize = ({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            event.trigger(EVENT.RESIZE, { width, height });\n        });\n    };\n\n    const destroy = (err? : mixed) : ZalgoPromise<void> => {\n        // eslint-disable-next-line promise/no-promise-in-callback\n        return ZalgoPromise.try(() => {\n            return event.trigger(EVENT.DESTROY);\n        }).catch(noop).then(() => {\n            return clean.all();\n        }).then(() => {\n            initPromise.asyncReject(err || new Error('Component destroyed'));\n        });\n    };\n\n    const close = () : ZalgoPromise<void> => {\n        if (closeOverride) {\n            return closeOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            return event.trigger(EVENT.CLOSE);\n        }).then(() => {\n            return destroy(new Error(`Window closed`));\n        });\n    };\n\n    const open = (context : $Values<typeof CONTEXT>, { proxyWin, proxyFrame, windowName } : { proxyWin : ProxyWindow, proxyFrame : ?ProxyObject<HTMLIFrameElement>, windowName : string }) : ZalgoPromise<ProxyWindow> => {\n        if (openOverride) {\n            return openOverride(context,  { proxyWin, proxyFrame, windowName });\n        }\n        \n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                if (!proxyFrame) {\n                    throw new Error(`Expected proxy frame to be passed`);\n                }\n        \n                return proxyFrame.get().then(frame => {\n                    return awaitFrameWindow(frame).then(win => {\n        \n                        const frameWatcher = watchElementForClose(frame, close);\n                        clean.register(() => frameWatcher.cancel());\n                        clean.register(() => destroyElement(frame));\n                        clean.register(() => cleanUpWindow(win));\n        \n                        return win;\n                    });\n                });\n            } else if (context === CONTEXT.POPUP && __ZOID__.__POPUP_SUPPORT__) {\n                let { width, height } = dimensions;\n    \n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n    \n                const win = popup('', {\n                    name: windowName,\n                    width,\n                    height,\n                    ...attributes.popup\n                });\n    \n                clean.register(() => closeWindow(win));\n                clean.register(() => cleanUpWindow(win));\n\n                return win;\n            } else {\n                throw new Error(`No render target found`);\n            }\n\n        }).then(win => {\n            proxyWin.setWindow(win, { send });\n            return proxyWin;\n        });\n    };\n\n    const watchForUnload = () => {\n        return ZalgoPromise.try(() => {\n            const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n                destroy(new Error(`Window navigated away`));\n            }));\n    \n            const closeParentWindowListener = onCloseWindow(parentWin, destroy, 3000);\n            clean.register(closeParentWindowListener.cancel);\n            clean.register(unloadWindowListener.cancel);\n\n            if (watchForUnloadOverride) {\n                return watchForUnloadOverride();\n            }\n        });\n    };\n\n    const watchForClose = (proxyWin : ProxyWindow) : ZalgoPromise<void> => {\n        let cancelled = false;\n\n        clean.register(() => {\n            cancelled = true;\n        });\n\n        return ZalgoPromise.delay(2000).then(() => {\n            return proxyWin.isClosed();\n        }).then(isClosed => {\n            if (isClosed) {\n                return close();\n            } else if (!cancelled) {\n                return watchForClose(proxyWin);\n            }\n        });\n    };\n\n    const checkWindowClose = (proxyWin : ProxyWindow) : ZalgoPromise<boolean> => {\n        let closed = false;\n        \n        return proxyWin.isClosed().then(isClosed => {\n            if (isClosed) {\n                closed = true;\n                return close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => proxyWin.isClosed())\n                .then(secondIsClosed => {\n                    if (secondIsClosed) {\n                        closed = true;\n                        return close();\n                    }\n                });\n        }).then(() => {\n            return closed;\n        });\n    };\n\n    const onError = (err : mixed) : ZalgoPromise<void> => {\n        if (onErrorOverride) {\n            return onErrorOverride(err);\n        }\n\n        return ZalgoPromise.try(() => {\n            if (handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            handledErrors.push(err);\n            initPromise.asyncReject(err);\n\n            return event.trigger(EVENT.ERROR, err);\n        });\n    };\n\n    initChild.onError = onError;\n\n    const buildParentExports = (win : ProxyWindow) : ParentExportsType<P> => {\n        const checkClose = () => checkWindowClose(win);\n        return { init: initChild, close, checkClose, resize, onError, show, hide };\n    };\n\n    const buildChildPayload = ({ proxyWin, childDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload => {\n        return {\n            uid,\n            context,\n            tag,\n            version:      __ZOID__.__VERSION__,\n            childDomain,\n            parentDomain: getDomain(window),\n            parent:       getWindowRef(target, childDomain, uid, context),\n            props:        getPropsRef(proxyWin, childDomain, domain, uid),\n            exports:      serializeMessage(proxyWin, domain, buildParentExports(proxyWin))\n        };\n    };\n\n    const buildWindowName = ({ proxyWin, childDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string => {\n        const childPayload = buildChildPayload({ proxyWin, childDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    };\n\n    const renderTemplate = (renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement => {\n        // $FlowFixMe\n        return renderer({\n            container, context, uid, doc, frame, prerenderFrame,\n            focus, close, state, props, tag, dimensions, event\n        });\n    };\n\n    const prerender = (proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> => {\n        if (prerenderOverride) {\n            return prerenderOverride(proxyPrerenderWin, { context, uid });\n        }\n                                                                                                                                                                                                                                    \n        return ZalgoPromise.try(() => {\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = autoResize;\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    };\n\n    const renderContainer : RenderContainer = (proxyContainer : ProxyObject<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } :\n        { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> }) : ZalgoPromise<?ProxyObject<HTMLElement>> => {\n\n        if (renderContainerOverride) {\n            return renderContainerOverride(proxyContainer, { proxyFrame, proxyPrerenderFrame, context, uid });\n        }\n\n        return ZalgoPromise.hash({\n            container:      proxyContainer.get(),\n            // $FlowFixMe\n            frame:          proxyFrame ? proxyFrame.get() : null,\n            // $FlowFixMe\n            prerenderFrame: proxyPrerenderFrame ? proxyPrerenderFrame.get() : null\n        }).then(({ container, frame, prerenderFrame }) => {\n            const innerContainer = renderTemplate(containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                if (!visible) {\n                    hideElement(innerContainer);\n                }\n                appendChild(container, innerContainer);\n                clean.register(() => destroyElement(innerContainer));\n                currentProxyContainer = getProxyObject(innerContainer);\n                return currentProxyContainer;\n            }\n        });\n    };\n\n    const openBridge = (proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> => {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = options.bridgeUrl;\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    };\n\n    const getHelpers = () : ParentHelpers<P> => {\n        return {\n            state, event, close, focus, resize,\n            // eslint-disable-next-line no-use-before-define\n            onError, updateProps, show, hide\n        };\n    };\n\n    const setProps = (newProps : PropsInputType<P>, isUpdate? : boolean = false) => {\n        if (__DEBUG__ && validate) {\n            validate({ props: newProps });\n        }\n\n        const helpers = getHelpers();\n        extendProps(propsDef, props, newProps, helpers, isUpdate);\n    };\n\n    const updateProps = (newProps : PropsInputType<P>) : ZalgoPromise<void> => {\n        setProps(newProps, true);\n\n        return initPromise.then(() => {\n            const child = childComponent;\n            const proxyWin = currentProxyWin;\n            \n            if (!child || !proxyWin) {\n                return;\n            }\n\n            return child.updateProps(getPropsForChild(getDomainMatcher())).catch(err => {\n                return checkWindowClose(proxyWin).then(closed => {\n                    if (!closed) {\n                        throw err;\n                    }\n                });\n            });\n        });\n    };\n\n    const delegate = (context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) : ZalgoPromise<DelegateOverrides> => {\n        const delegateProps = {};\n        for (const propName of Object.keys(props)) {\n            const propDef = propsDef[propName];\n            if (propDef && propDef.allowDelegate) {\n                delegateProps[propName] = props[propName];\n            }\n        }\n\n        const childOverridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ name }`, {\n            overrides: { props: delegateProps, event, close, onError }\n        }).then(({ data: { parent } }) => {\n            clean.register(() => {\n                if (!isWindowClosed(target)) {\n                    return parent.destroy();\n                }\n            });\n            return parent.getDelegateOverrides();\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        getProxyContainerOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.getProxyContainer(...args));\n        renderContainerOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.renderContainer(...args));\n        showOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.show(...args));\n        hideOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.hide(...args));\n        watchForUnloadOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.watchForUnload(...args));\n\n        if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n            getProxyWindowOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.getProxyWindow(...args));\n            openFrameOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.openFrame(...args));\n            openPrerenderFrameOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.openPrerenderFrame(...args));\n            prerenderOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.prerender(...args));\n            openOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.open(...args));\n            openPrerenderOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.openPrerender(...args));\n        } else if (context === CONTEXT.POPUP && __ZOID__.__POPUP_SUPPORT__) {\n            setProxyWinOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.setProxyWin(...args));\n        }\n\n        return childOverridesPromise;\n    };\n\n    const getDelegateOverrides = () : ZalgoPromise<DelegateOverrides> => {\n        return ZalgoPromise.try(() => {\n            return {\n                getProxyContainer, show, hide, renderContainer, getProxyWindow, watchForUnload,\n                openFrame, openPrerenderFrame, prerender, open, openPrerender, setProxyWin\n            };\n        });\n    };\n\n    const checkAllowRender = (target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) => {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    };\n\n    const init = () => {\n        setupEvents();\n    };\n\n    const render = (target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            const uid = `${ ZOID }-${ tag }-${ uniqueID() }`;\n            const domain = getDomainMatcher();\n            const childDomain = getChildDomain();\n            \n            checkAllowRender(target, domain, container);\n\n            const delegatePromise = ZalgoPromise.try(() => {\n                if (target !== window) {\n                    return delegate(context, target);\n                }\n            });\n\n            const windowProp = props.window;\n\n            const watchForUnloadPromise = watchForUnload();\n            \n            const buildUrlPromise = buildUrl();\n            const onRenderPromise = event.trigger(EVENT.RENDER);\n\n            const getProxyContainerPromise = getProxyContainer(container);\n            const getProxyWindowPromise = getProxyWindow();\n\n            const buildWindowNamePromise = getProxyWindowPromise.then(proxyWin => {\n                return buildWindowName({ proxyWin, childDomain, domain, target, context, uid });\n            });\n\n            const openFramePromise = buildWindowNamePromise.then(windowName => openFrame(context, { windowName }));\n            const openPrerenderFramePromise = openPrerenderFrame(context);\n\n            const renderContainerPromise = ZalgoPromise.hash({ proxyContainer: getProxyContainerPromise, proxyFrame: openFramePromise, proxyPrerenderFrame: openPrerenderFramePromise }).then(({ proxyContainer, proxyFrame, proxyPrerenderFrame }) => {\n                return renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            }).then(proxyContainer => {\n                return proxyContainer;\n            });\n\n            const openPromise = ZalgoPromise.hash({ windowName: buildWindowNamePromise, proxyFrame: openFramePromise, proxyWin: getProxyWindowPromise }).then(({ windowName, proxyWin, proxyFrame }) => {\n                return windowProp\n                    ? proxyWin\n                    : open(context, { windowName, proxyWin, proxyFrame });\n            });\n\n            const openPrerenderPromise = ZalgoPromise.hash({ proxyWin: openPromise, proxyPrerenderFrame: openPrerenderFramePromise }).then(({ proxyWin, proxyPrerenderFrame }) => {\n                return openPrerender(context, proxyWin, proxyPrerenderFrame);\n            });\n\n            const setStatePromise = openPromise.then(proxyWin => {\n                currentProxyWin = proxyWin;\n                return setProxyWin(proxyWin);\n            });\n            \n            const prerenderPromise = ZalgoPromise.hash({ proxyPrerenderWin: openPrerenderPromise, state: setStatePromise }).then(({ proxyPrerenderWin }) => {\n                return prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            const setWindowNamePromise =  ZalgoPromise.hash({ proxyWin: openPromise, windowName: buildWindowNamePromise }).then(({ proxyWin, windowName }) => {\n                if (windowProp) {\n                    return proxyWin.setName(windowName);\n                }\n            });\n\n            const loadUrlPromise = ZalgoPromise.hash({ proxyWin: openPromise, builtUrl: buildUrlPromise, windowName: setWindowNamePromise, prerender: prerenderPromise }).then(({ proxyWin, builtUrl }) => {\n                return proxyWin.setLocation(builtUrl);\n            });\n\n            const watchForClosePromise = openPromise.then(proxyWin => {\n                watchForClose(proxyWin);\n            });\n\n            const onDisplayPromise = ZalgoPromise.hash({ container: renderContainerPromise, prerender: prerenderPromise }).then(() => {\n                return event.trigger(EVENT.DISPLAY);\n            });\n\n            const openBridgePromise = openPromise.then(proxyWin => {\n                return openBridge(proxyWin, childDomain, context);\n            });\n\n            const runTimeoutPromise = loadUrlPromise.then(() => {\n                return runTimeout();\n            });\n\n            const onRenderedPromise = initPromise.then(() => {\n                return event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash({\n                initPromise, buildUrlPromise, onRenderPromise, getProxyContainerPromise, openFramePromise, openPrerenderFramePromise, renderContainerPromise, openPromise,\n                openPrerenderPromise, setStatePromise, prerenderPromise, loadUrlPromise, buildWindowNamePromise, setWindowNamePromise, watchForClosePromise, onDisplayPromise,\n                openBridgePromise, runTimeoutPromise, onRenderedPromise, delegatePromise, watchForUnloadPromise\n            });\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                onError(err),\n                destroy(err)\n            ]).then(() => {\n                throw err;\n            }, () => {\n                throw err;\n            });\n        }).then(noop);\n    };\n\n    return {\n        init,\n        render,\n        destroy,\n        setProps,\n        getHelpers,\n        getDelegateOverrides\n    };\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindowClosed } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window ${ isWindowClosed(win) ? 'closed' : 'cleaned up' } before response`)).catch(noop);\n    }\n}\n","/* @flow */\n/* eslint react/no-deprecated: off, react/no-find-dom-node: off, react/display-name: off, react/no-did-mount-set-state: off, react/destructuring-assignment: off, react/prop-types: off */\n\nimport { extend, noop } from 'belter/src';\n\nimport type { ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ndeclare class ReactClassType {\n\n}\n\ntype ReactElementType = {|\n\n|};\n\ndeclare class __ReactComponent {\n\n}\n\ntype ReactType = {|\n    Component : __ReactComponent,\n    createClass : ({ render : () => ReactElementType, componentDidMount : () => void, componentDidUpdate : () => void }) => (typeof ReactClassType),\n    createElement : (string, ?{ [string] : mixed }, ...children : $ReadOnlyArray<ReactElementType>) => ReactElementType\n|};\n\ntype ReactDomType = {|\n    findDOMNode : (typeof ReactClassType) => HTMLElement\n|};\n\ntype ReactLibraryType = {|\n    React : ReactType,\n    ReactDOM : ReactDomType\n|};\n\nexport const react : ComponentDriverType<*, ReactLibraryType, typeof ReactClassType> = {\n\n    register: (tag, propsDef, init, { React, ReactDOM }) => {\n\n        // $FlowFixMe\n        return class extends React.Component {\n            render() : ReactElementType {\n                return React.createElement('div', null);\n            }\n\n            componentDidMount() {\n                const el = ReactDOM.findDOMNode(this);\n                const parent = init(extend({}, this.props));\n                parent.render(el, CONTEXT.IFRAME);\n                this.setState({ parent });\n            }\n\n            componentDidUpdate() {\n\n                if (this.state && this.state.parent) {\n                    this.state.parent.updateProps(extend({}, this.props)).catch(noop);\n                }\n            }\n        };\n    }\n};\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","/* @flow */\n\nimport { noop } from 'belter/src';\n\nimport type { ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ntype VueComponent = {|\n    render : (Function) => Element,\n    inheritAttrs : boolean,\n    mounted : () => void,\n    watch : {|\n        $attrs : {|\n            deep : boolean,\n            handler : () => void\n        |}\n    |}\n|};\n\ntype RegisteredVueComponent = {|\n    \n|};\n\ntype VueType = {|\n    component : (string, VueComponent) => RegisteredVueComponent\n|};\n\nexport const vue : ComponentDriverType<*, VueType, RegisteredVueComponent> = {\n\n    register: (tag, propsDef, init, Vue) => {\n\n        return Vue.component(tag, {\n            render(createElement) : Element {\n                return createElement('div');\n            },\n\n            inheritAttrs: false,\n\n            mounted() {\n                const el = this.$el;\n                \n                this.parent = init({ ...this.$attrs });\n                this.parent.render(el, CONTEXT.IFRAME);\n            },\n\n            watch: {\n                $attrs: {\n                    handler: function handler() {\n                        if (this.parent && this.$attrs) {\n                            this.parent.updateProps({ ...this.$attrs }).catch(noop);\n                        }\n                    },\n                    deep: true\n                }\n            }\n        });\n    }\n};\n","/* @flow */\n\nimport { dasherizeToCamel, replaceObject, noop } from 'belter/src';\n\nimport type { ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ntype AngularModule = {|\n    directive : (string, () => {\n        scope : { [string] : '=' | '@' },\n        restrict : string,\n        controller : $ReadOnlyArray<string | Function>\n    }) => AngularModule\n|};\n\ntype Angular = {|\n    module : (string, $ReadOnlyArray<string>) => AngularModule\n|};\n\nexport const angular : ComponentDriverType<*, Angular, AngularModule> = {\n\n    register: (tag, propsDef, init, ng) => {\n\n        const module = ng.module(tag, []).directive(dasherizeToCamel(tag), () => {\n\n            const scope = {};\n\n            for (const key of Object.keys(propsDef)) {\n                scope[key] = '=';\n            }\n\n            scope.props = '=';\n\n            return {\n                scope,\n\n                restrict: 'E',\n\n                controller: [ '$scope', '$element', ($scope, $element) => {\n                    function safeApply() {\n                        if ($scope.$root.$$phase !== '$apply' && $scope.$root.$$phase !== '$digest') {\n                            try {\n                                $scope.$apply();\n                            } catch (err) {\n                                // pass\n                            }\n                        }\n                    }\n\n                    const getProps = () => {\n                        return replaceObject($scope.props, item => {\n                            if (typeof item === 'function') {\n                                return function angularWrapped() : mixed {\n                                    // $FlowFixMe\n                                    const result = item.apply(this, arguments);\n                                    safeApply();\n                                    return result;\n                                };\n                            }\n                            return item;\n                        });\n                    };\n\n                    const instance = init(getProps());\n                    instance.render($element[0], CONTEXT.IFRAME);\n\n                    $scope.$watch(() => {\n                        instance.updateProps(getProps()).catch(noop);\n                    });\n                } ]\n            };\n        });\n\n        return module;\n    }\n};\n","/* @flow */\n/* eslint new-cap: 0 */\n\nimport { replaceObject } from 'belter/src';\n\nimport type { ComponentDriverType } from '../component';\nimport { CONTEXT } from '../constants';\n\ntype Angular2Injection = {||};\n\ntype Angular2Component = {||};\n\ntype Angular2Module = {||};\n\ntype Angular2 = {|\n    Component : ({ selector : string, template : string, inputs : $ReadOnlyArray<string> }) => {\n        Class : ({ constructor : $ReadOnlyArray<Angular2Injection | Function>, ngOnInit : () => void, ngDoCheck : () => void }) => Angular2Component\n    },\n    NgModule : ({ declarations : $ReadOnlyArray<Angular2Component>, exports : $ReadOnlyArray<Angular2Component> }) => {\n        Class : ({ constructor : () => void }) => Angular2Module\n    },\n    ElementRef : Angular2Injection,\n    NgZone : Angular2Injection\n|};\n\nconst equals = (obj1, obj2) => {\n    const checked = {};\n\n    for (const key in obj1) {\n        if (obj1.hasOwnProperty(key)) {\n            checked[key] = true;\n\n            if (obj1[key] !== obj2[key]) {\n                return false;\n            }\n        }\n    }\n\n    for (const key in obj2) {\n        if (!checked[key]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport const angular2 : ComponentDriverType<*, Angular2, Angular2Module> = {\n\n    register: (tag, propsDef, init, { Component : AngularComponent, NgModule, ElementRef, NgZone }) => {\n        const getProps = (component) => {\n            return replaceObject({ ...component.internalProps, ...component.props }, item => {\n                if (typeof item === 'function') {\n                    return function angular2Wrapped() : void {\n                        // $FlowFixMe\n                        return component.zone.run(() => item.apply(this, arguments));\n                    };\n                }\n                return item;\n            });\n        };\n\n        const ComponentInstance =\n            AngularComponent({\n                selector: tag,\n                template: '<div></div>',\n                inputs:   [ 'props' ]\n            }).Class({\n                constructor: [ ElementRef, NgZone, function angularConstructor(elementRef, zone) {\n                    this._props = {};\n                    this.elementRef = elementRef;\n                    this.zone = zone;\n                } ],\n                ngOnInit () {\n                    const targetElement = this.elementRef.nativeElement;\n                    \n                    this.parent = init(getProps(this));\n                    this.parent.render(targetElement, CONTEXT.IFRAME);\n                },\n                ngDoCheck() {\n                    if (this.parent && !equals(this._props, this.props)) {\n                        this._props = { ...this.props };\n                        this.parent.updateProps(getProps(this));\n                    }\n                }\n            });\n\n\n        const ModuleInstance = NgModule({\n            declarations: [ ComponentInstance ],\n            exports:      [ ComponentInstance ]\n        }).Class({\n            constructor () {\n                // pass\n            }\n        });\n\n        return ModuleInstance;\n    }\n};\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement, toCSS } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent/parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'zoid-visible',\n    INVISIBLE: 'zoid-invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, props, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        const style = doc.createElement('style');\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: relative;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n    \n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n    \n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n    \n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        event.on(EVENT.RESIZE, ({ width: newWidth, height: newHeight }) => {\n            if (typeof newWidth === 'number') {\n                div.style.width = toCSS(newWidth);\n            }\n    \n            if (typeof newHeight === 'number') {\n                div.style.height = toCSS(newHeight);\n            }\n        });\n\n        return div;\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { type RenderOptionsType } from '../../parent/parent';\n\nexport function defaultPrerenderTemplate<P>({ doc, props } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_PRERENDER__) {\n        const html = doc.createElement('html');\n        const body = doc.createElement('body');\n        const style = doc.createElement('style');\n        const spinner = doc.createElement('div');\n        spinner.classList.add('spinner');\n\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        html.appendChild(body);\n        body.appendChild(spinner);\n        body.appendChild(style);\n        style.appendChild(doc.createTextNode(`\n            html, body {\n                width: 100%;\n                height: 100%;\n            }\n\n            .spinner {\n                position: fixed;\n                max-height: 60vmin;\n                max-width: 60vmin;\n                height: 40px;\n                width: 40px;\n                top: 50%;\n                left: 50%;\n                box-sizing: border-box;\n                border: 3px solid rgba(0, 0, 0, .2);\n                border-top-color: rgba(33, 128, 192, 0.8);\n                border-radius: 100%;\n                animation: rotation .7s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                }\n                to {\n                    transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                }\n            }\n        `));\n\n        return html;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop, type EventEmitterType } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType, isWindowClosed, isSameDomain } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type cspNoncePropType = string;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type showPropType = () => ZalgoPromise<void>;\nexport type hidePropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\nexport type getParentPropType = () => CrossDomainWindowType;\nexport type getParentDomainPropType = () => string;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onDestroyPropType = EventHandlerType<void>;\nexport type onResizePropType = EventHandlerType<void>;\nexport type onFocusPropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n    cspNonce? : cspNoncePropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onDestroy? : onDestroyPropType,\n    onResize? : onResizePropType,\n    onFocus? : onFocusPropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n    cspNonce? : ?cspNoncePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onDestroy : onDestroyPropType,\n    onResize : onResizePropType,\n    onFocus : onFocusPropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({|\n        props : P,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => ?T,\n    default? : ({|\n        props : P,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => ?T,\n    decorate? : ({|\n        value : T,\n        props : PropsType<P>,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => T,\n    childDecorate? : ({|\n        value : ?T,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        onProps : ((PropsType<P>) => void) => void,\n        resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n        getParentDomain : () => string,\n        getParent : () => CrossDomainWindowType,\n        show : () => ZalgoPromise<void>,\n        hide : () => ZalgoPromise<void>\n    |}) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({| value : T |}) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({| value : T, props : PropsInputType<P> |}) => void,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*> | $ReadOnlyArray<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\nexport type BuiltInPropsDefinitionType<P> = {|\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n    cspNonce : StringPropDefinitionType<cspNoncePropType, P>,\n    getParent : FunctionPropDefinitionType<getParentPropType, P>,\n    getParentDomain : FunctionPropDefinitionType<getParentDomainPropType, P>,\n    hide : FunctionPropDefinitionType<hidePropType, P>,\n    show : FunctionPropDefinitionType<showPropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onDestroy : FunctionPropDefinitionType<onDestroyPropType, P>,\n    onResize : FunctionPropDefinitionType<onClosePropType, P>,\n    onFocus : FunctionPropDefinitionType<onFocusPropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n|};\n\nexport type PropsDefinitionType<P> = {|\n    ...BuiltInPropsDefinitionType<P>,\n    [ string ] : MixedPropDefinitionType<P>\n|};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (__DEBUG__) {\n                    if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                        throw new Error(`Expected Window or ProxyWindow`);\n                    }\n    \n                    if (isWindow(value)) {\n                        // $FlowFixMe\n                        if (isWindowClosed(value)) {\n                            throw new Error(`Window is closed`);\n                        }\n    \n                        // $FlowFixMe\n                        if (!isSameDomain(value)) {\n                            throw new Error(`Window is not same domain`);\n                        }\n                    }\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        cspNonce: {\n            type:     'string',\n            required: false\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        getParentDomain: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParentDomain }) => getParentDomain\n        },\n\n        show: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ show }) => show\n        },\n\n        hide: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ hide }) => hide\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onDestroy: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onResize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onFocus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { setup as setupPostRobot, on, send, bridge, toProxyWindow, destroy as destroyPostRobot } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, isElement, cleanup, memoize } from 'belter/src';\n\nimport { getChildPayload, childComponent, type ChildComponent } from '../child';\nimport { type RenderOptionsType, type ParentHelpers, parentComponent } from '../parent/parent';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport { getGlobal, destroyGlobal } from '../lib';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validateOptions } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type PropsDefinitionType, type PropsInputType, type PropsType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    info : (event : string, payload? : LoggerPayload) => any // eslint-disable-line flowtype/no-weak-types\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\nexport type NormalizedComponentOptionsType<P> = {|\n    tag : string,\n    name : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain : ?(string | RegExp),\n    bridgeUrl : ?string,\n\n    propsDef : PropsDefinitionType<P>,\n    dimensions : CssDimensionsType,\n    autoResize : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains : StringMatcherType,\n\n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext : $Values<typeof CONTEXT>,\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement,\n\n    validate : ?({ props : PropsInputType<P> }) => void,\n    logger : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type ZoidComponent<P> = {\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n};\n\nfunction normalizeOptions<P>(options : ComponentOptionsType<P>) : NormalizedComponentOptionsType<P> {\n    let {\n        tag,\n        url,\n        domain,\n        bridgeUrl,\n        props: propsDef = {},\n        dimensions = {},\n        autoResize = {},\n        allowedParentDomains = WILDCARD,\n        attributes = {},\n        defaultContext = CONTEXT.IFRAME,\n        containerTemplate = (__ZOID__.__DEFAULT_CONTAINER__ ? defaultContainerTemplate : null),\n        prerenderTemplate = (__ZOID__.__DEFAULT_PRERENDER__ ? defaultPrerenderTemplate : null),\n        validate,\n        logger = { info: noop }\n    } = options;\n\n    const name = tag.replace(/-/g, '_');\n    const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = dimensions;\n\n    propsDef = { ...getBuiltInProps(), ...propsDef };\n\n    if (!containerTemplate) {\n        throw new Error(`Container template required`);\n    }\n\n    return {\n        name,\n        tag,\n        url,\n        domain,\n        bridgeUrl,\n        propsDef,\n        dimensions: { width, height },\n        autoResize,\n        allowedParentDomains,\n        attributes,\n        defaultContext,\n        containerTemplate,\n        prerenderTemplate,\n        validate,\n        logger\n    };\n}\n\nlet clean = cleanup();\n\nexport type Component<P> = {|\n    init : (PropsInputType<P>) => ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>,\n    registerChild : () => ?ChildComponent<P>\n|};\n\nexport function component<P>(opts : ComponentOptionsType<P>) : Component<P> {\n    if (__DEBUG__) {\n        validateOptions(opts);\n    }\n\n    const options = normalizeOptions(opts);\n\n    const {\n        name,\n        tag,\n        defaultContext,\n        propsDef\n    } = options;\n\n    const global = getGlobal();\n    const driverCache = {};\n\n    const isChild = () : boolean => {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === tag && payload.childDomain === getDomain());\n    };\n\n    const registerChild = memoize(() : ?ChildComponent<P> => {\n        if (isChild()) {\n            if (window.xprops) {\n                delete global.components[tag];\n                throw new Error(`Can not register ${ name } as child - child already registered`);\n            }\n\n            const child = childComponent(options);\n            child.init();\n            return child;\n        }\n    });\n\n    const listenForDelegate = () => {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ name }`, ({ source, data: { overrides } }) => {\n            return {\n                parent: parentComponent(options, overrides, source)\n            };\n        });\n    };\n\n    const canRenderTo = (win : CrossDomainWindowType) : ZalgoPromise<boolean> => {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    };\n\n    const getDefaultContainer = (context : $Values<typeof CONTEXT>, container? : string | HTMLElement) : string | HTMLElement => {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    };\n\n    const getDefaultContext = (props : PropsInputType<P>, context : ?$Values<typeof CONTEXT>) : ZalgoPromise<$Values<typeof CONTEXT>> => {\n        return ZalgoPromise.try(() => {\n            if (props.window) {\n                return toProxyWindow(props.window).getType();\n            }\n    \n            if (context) {\n                if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                    throw new Error(`Unrecognized context: ${ context }`);\n                }\n                \n                return context;\n            }\n    \n            return defaultContext;\n        });\n    };\n\n    const getDefaultInputProps = () : PropsInputType<P> => {\n        // $FlowFixMe\n        return {};\n    };\n\n    const init = (props : PropsInputType<P>) : ZoidComponentInstance<P> => {\n        props = props || getDefaultInputProps();\n        props.onDestroy = memoize(props.onDestroy || noop);\n        const parent = parentComponent(options);\n        \n        parent.init();\n        parent.setProps(props);\n\n        clean.register(() => {\n            parent.destroy(new Error(`zoid destroyed all components`));\n        });\n\n        const render = (target, container, context) => {\n            return ZalgoPromise.try(() => {\n                if (!isWindow(target)) {\n                    throw new Error(`Must pass window to renderTo`);\n                }\n\n                return getDefaultContext(props, context);\n                \n            }).then(finalContext => {\n                container = getDefaultContainer(finalContext, container);\n                return parent.render(target, container, finalContext);\n\n            }).catch(err => {\n                return parent.destroy(err).then(() => {\n                    throw err;\n                });\n            });\n        };\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    };\n\n    const driver = (driverName : string, dep : mixed) : mixed => {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[driverName]) {\n                throw new Error(`Could not find driver for framework: ${ driverName }`);\n            }\n    \n            if (!driverCache[driverName]) {\n                driverCache[driverName] = drivers[driverName].register(tag, propsDef, init, dep);\n            }\n    \n            return driverCache[driverName];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    };\n\n    registerChild();\n    listenForDelegate();\n\n    global.components = global.components || {};\n    if (global.components[tag]) {\n        throw new Error(`Can not register multiple components with the same tag: ${ tag }`);\n    }\n    global.components[tag] = true;\n\n    return {\n        init,\n        driver,\n        isChild,\n        canRenderTo,\n        registerChild\n    };\n}\n\nexport type ComponentDriverType<P, L, D> = {|\n    register : (string, PropsDefinitionType<P>, (PropsInputType<P>) => ZoidComponentInstance<P>, L) => D\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    setupPostRobot();\n\n    const comp = component(options);\n\n    const init = (props) => comp.init(props);\n    init.driver = (name, dep) => comp.driver(name, dep);\n    init.isChild = () => comp.isChild();\n    init.canRenderTo = (win) => comp.canRenderTo(win);\n\n    const child = comp.registerChild();\n    if (child) {\n        window.xprops = init.xprops = child.getProps();\n    }\n    \n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    if (bridge) {\n        bridge.destroyBridges();\n    }\n\n    const destroyPromise = clean.all();\n    clean = cleanup();\n    return destroyPromise;\n}\n\nexport const destroyComponents = destroyAll;\n\nexport function destroy() {\n    destroyAll();\n    destroyGlobal();\n    destroyPostRobot();\n}\n"],"sourceRoot":""}